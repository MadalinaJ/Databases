1. Write out a generic SELECT statement.

	SELECT firstColumn

	FROM catTable

	WHERE condition=3;


2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

 Select 

 Column 

 From

 Table

 Where

 Condition

 Small cat from the wild city.


3. Given this dogs table, write queries to select the following pieces of data:

Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

- Display the name, gender, and age of all dogs that are part Labrador.

	SELECT name, gender, age

	FROM dogs

	WHERE breed LIKE '%labrador%'; 

- Display the ids of all dogs that are under 1 year old.

	SELECT id

	FROM dogs

	WHERE age < 1;

- Display the name and age of all dogs that are female and over 35lbs.

	SELECT name, age

	FROM dogs
	
	WHERE gender='F' AND weight > 35;

- Display all of the information about all dogs that are not Shepherd mixes.

	SELECT *

	FROM dogs
	
	WHERE breed NOT LIKE '%shepherd%';

- Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

	SELECT id, age, weight, breed

	FROM dogs

	WHERE weight > 60 OR breed='great dane';


4. Given this cats table, what records are returned from these queries?

- SELECT name, adoption_date FROM cats;

	Mushi, 2016-03-22

	Seashell, NULL

	Azul, 2016-04-17

	Victoire, 2016-09-01

	Nala, NULL

- SELECT name, age FROM cats;
	
	Mushi, 1

	Seashell, 7

	Azul, 3

	Victoire, 7

	Nala, 1


5. From the cats table, write queries to select the following pieces of data.

- Display all the information about all of the available cats.

	SELECT *

	FROM cats;

- Display the name and sex of all cats who are 7 years old.

	SELECT name, gender
	FROM cats
	WHERE age=7;

- Find all of the names of the cats, so you don’t choose duplicate names for new cats.

	SELECT name
	
	FROM cats;


6. List each comparison operator and explain when you would use it. Include a real world example for each.

> Greater than : compare two values

	WHERE price > 99;

< Less than: compare two values.

	WHERE price < 99;

= Equal : comparing two values/ strings or numbers.

	WHERE laptop=‘new’;

<=  Less than or equal to: compare two values

	WHERE id <= 35;

>= Greater than or equal to: compare two values

	WHERE id >= 40;

!= Not equal to: compare two values

	WHERE color !=green;

<> not equal to: comparing 2 compatible values

	WHERE age <> 14;



LIKE - pattern matches a string

	WHERE name LIKE ‘%John%’;

BETWEEN - if expression is within a range 

	WHERE id BETWEEN 150 AND 245; 

IS TRUE/ IS FALSE - return value where a boolean equals true or false

	WHERE isAvailable IS TRUE;

	WHERE isAvailable IS FALSE;

IS NULL - Determines if a cell is empty/null

	WHERE price IS NULL;

AND - both conditions need to be true for the row to be displayed

	WHERE price=50 AND size=6;

OR - one condition needs to be true for the row to be displayed 

	WHERE age<30 OR city=‘Barcelona’;

NOT - condition needs to be false for the row to be returned 

	WHERE  NOT LIKE '%Ana%';



7. From the cats table, what data is returned from these queries?

- SELECT name FROM cats WHERE gender = 'F';

	Seashell

	Nala

- SELECT name FROM cats WHERE age <> 3;

	Mushi

	Seashell

	Victoire

	Nala

- SELECT ID FROM cats WHERE name != 'Mushi' AND gender = 'M';

   3; 
   4;